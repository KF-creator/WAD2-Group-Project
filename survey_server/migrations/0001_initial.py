# Generated by Django 4.1.7 on 2023-02-28 23:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'customer'), (2, 'manager')], default=1)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(default=0, upload_to='')),
                ('cuisine', models.CharField(max_length=128)),
                ('about', models.TextField(blank=True, null=0)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_score', models.IntegerField(default=0)),
                ('final_score', models.IntegerField(default=0)),
                ('ordered_starter', models.CharField(default=0, max_length=128)),
                ('time_starter', models.CharField(default=0, max_length=128)),
                ('size_starter', models.CharField(default=0, max_length=128)),
                ('presentation_starter', models.CharField(default=0, max_length=128)),
                ('variety_starter', models.CharField(default=0, max_length=128)),
                ('ordered_maincourse', models.CharField(default=0, max_length=128)),
                ('time_maincourse', models.CharField(default=0, max_length=128)),
                ('size_maincourse', models.CharField(default=0, max_length=128)),
                ('presentation_maincourse', models.CharField(default=0, max_length=128)),
                ('variety_maincourse', models.CharField(default=0, max_length=128)),
                ('ordered_dessert', models.CharField(default=0, max_length=128)),
                ('time_dessert', models.CharField(default=0, max_length=128)),
                ('size_dessert', models.CharField(default=0, max_length=128)),
                ('presentation_dessert', models.CharField(default=0, max_length=128)),
                ('variety_dessert', models.CharField(default=0, max_length=128)),
                ('ordered_drink', models.CharField(default=0, max_length=128)),
                ('time_drink', models.CharField(default=0, max_length=128)),
                ('size_drink', models.CharField(default=0, max_length=128)),
                ('presentation_drink', models.CharField(default=0, max_length=128)),
                ('variety_drink', models.CharField(default=0, max_length=128)),
                ('greeting_entry', models.CharField(default=0, max_length=128)),
                ('greeting_waiting', models.CharField(default=0, max_length=128)),
                ('greeting_clean', models.CharField(default=0, max_length=128)),
                ('greeting_order', models.CharField(default=0, max_length=128)),
                ('use_restroom', models.CharField(default=0, max_length=128)),
                ('restroom_clean', models.CharField(default=0, max_length=128)),
                ('missing_restroom', models.CharField(default=0, max_length=128)),
                ('clean_restaurant', models.CharField(default=0, max_length=128)),
                ('pay_bill_restaurant', models.CharField(default=0, max_length=128)),
                ('service_staff', models.CharField(default=0, max_length=128)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='survey_server.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='customer', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profile_picture', models.ImageField(default=0, upload_to='')),
                ('bio', models.TextField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='manager', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('profile_picture', models.ImageField(default=0, upload_to='')),
                ('bio', models.TextField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Voucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vocher_code', models.CharField(blank=True, max_length=128, null=True)),
                ('value', models.IntegerField(default=0)),
                ('issue_date', models.DateField(blank=True, null=True)),
                ('is_valid', models.BooleanField(default=True)),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='survey_server.restaurant')),
                ('survey', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vouchers', to='survey_server.survey')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='survey_server.customer')),
            ],
        ),
        migrations.AddField(
            model_name='survey',
            name='voucher',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='surveys', to='survey_server.voucher'),
        ),
        migrations.AddField(
            model_name='survey',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='survey_server.customer'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='manager',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='survey_server.manager'),
        ),
    ]
